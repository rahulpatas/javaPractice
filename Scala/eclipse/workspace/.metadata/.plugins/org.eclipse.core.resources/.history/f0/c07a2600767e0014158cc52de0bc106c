package week3

object RationWithSymboles {
 
 def makeString(r: Rational) =
    r.numer + "/" + r.denom                       //> makeString: (r: week3.Rational)String

                                                  //> res3: String = 7/6

  val x1 = new Rational1(1, 3)                    //> x1  : week3.Rational = week3.Rational@7e0ea639
  val y = new Rational1(5, 7)                     //> y1  : week3.Rational = week3.Rational@3d24753a
  val z = new Rational1(3, 2)                     //> z  : week3.Rational = week3.Rational@59a6e353
  val b = x1 - y -z                               //> b  : week3.Rational = week3.Rational@7a0ac6e3
  makeString(b)                                   //> res4: String = -79/42

  x1 < y                                          //> res5: Boolean = true

  makeString(x1 max y1)                           //> res6: String = 5/7
  
  //val st= new Rational(1,0)
  //makeString(st.add(st))
  
}

class Rational1(x: Int, y: Int) {
  require(y != 0, "Denominator must be non Zero")
  
  def this(x : Int) = this(x,1)
  
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
  private val g = gcd(x, y)
  def numer = x / g
  def denom = y / g

  def <(that: Rational) = numer * that.denom < that.numer * denom
  def max(that: Rational) = if (this < that) that else this
  
  def + (that: Rational) =
    new Rational(
      numer * that.denom + that.numer * denom, denom * that.denom)

  def neg: Rational =
    new Rational(-numer, denom)

  def - (that: Rational) = this + that.neg
  //new Rational(
  //numer * that.denom - that.numer * denom, denom * that.denom)
}