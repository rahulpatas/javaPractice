package week3

object Rationals {

  val x = new Rational(1, 2)
  x.numer
  x.denom

  def addRational(r: Rational, s: Rational): Rational =
    new Rational(
      r.numer * s.denom + s.numer * r.denom,
      r.denom * s.denom)

  def makeString(r: Rational) =
    r.numer + "/" + r.denom

  makeString(addRational(new Rational(1, 2), new Rational(2, 3)))

  val y = new Rational(2, 3)
  val a = x.add(y)
  makeString(a)

  val x1 = new Rational(1, 3)
  val y1 = new Rational(5, 7)
  val z = new Rational(3, 2)
  val b = x1.sub(y1).sub(z)
  makeString(b)

  x1.less(y1)

  makeString(x1.max(y1))
  
  //val st= new Rational(1,0)
  //makeString(st.add(st))
}

class Rational(x: Int, y: Int) {
  require(y != 0, "Denominator must be non Zero")
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
  private val g = gcd(x, y)
  def numer = x / g
  def denom = y / g

  def less(that: Rational) = numer * that.denom < that.numer * denom
  def max(that: Rational) = if (this.less(that)) that else this
  def add(that: Rational) =
    new Rational(
      numer * that.denom + that.numer * denom, denom * that.denom)

  def neg: Rational =
    new Rational(-numer, denom)

  def sub(that: Rational) = add(that.neg)
  //new Rational(
  //numer * that.denom - that.numer * denom, denom * that.denom)
}